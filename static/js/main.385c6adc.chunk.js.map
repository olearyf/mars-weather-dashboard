{"version":3,"sources":["Footer.tsx","MarsDataHandler.tsx","GraphComponent.tsx","GraphComponentTemp.tsx","PageLayout.tsx","serviceWorker.ts","index.tsx"],"names":["Footer","className","Label","href","target","React","MarsDataHandler","parsedData","sol_keys","compiledData","fetch","then","response","json","data","setData","this","parseData","console","log","i","length","push","sol","temp_avg","AT","av","temp_max","mx","temp_min","mn","wind_avg","HWS","wind_max","wind_min","pressure_avg","PRE","pressure_max","pressure_min","GraphComponent","props","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","xDataKey","value","offset","position","yAxisLabel","angle","verticalAlign","type","yDataKeyMin","stackId","stroke","colors","fill","yDataKeyAvg","yDataKeyMax","Component","GraphComponentTemp","PageLayout","marsDataHandler","boldStyle","root","fontWeight","FontWeights","bold","stackTokens","childrenGap","temp_colors","wind_colors","pressure_colors","state","test","getData","getCompiledData","setState","Stack","tokens","Item","align","Text","variant","styles","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.385c6adc.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Label } from 'office-ui-fabric-react/lib/Label';\r\n\r\nexport class Footer extends React.Component<{}, {}> {\r\n    public render () {\r\n        return(\r\n        <div className='footer'>\r\n            <Label>An afternoon project by Frances O'Leary using the NASA InSight API. Code <a href=\"https://github.com/olearyf/mars-weather-dashboard/tree/master\" target=\"_blank\">here</a>.</Label>\r\n        </div>)\r\n    }\r\n}","export class MarsDataHandler {\r\n\r\n    parsedData: any;\r\n    sol_keys: any;\r\n    compiledData: {}[] = [];\r\n\r\n    public async getData() {\r\n        await fetch('https://api.nasa.gov/insight_weather/?api_key=eOMf0tm4jfdxtQNzmZfrTn8aFKqMn1EewwZRNDVD&feedtype=json&ver=1.0')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setData(data);\r\n            });\r\n    }\r\n\r\n    public setData(data: any) {\r\n        this.parsedData = data;\r\n        this.parseData();\r\n    }\r\n\r\n    public getCompiledData() {\r\n        return this.compiledData;\r\n    }\r\n\r\n    public parseData() {\r\n        let sol_keys: [] = this.parsedData.sol_keys;\r\n        console.log(this.parsedData.sol_keys)\r\n        this.compiledData = [];\r\n        for (let i = 0; i < this.parsedData.sol_keys.length; i++) {\r\n            this.compiledData.push({\r\n                sol: sol_keys[i],\r\n                temp_avg: this.parsedData[sol_keys[i]].AT.av,\r\n                temp_max: this.parsedData[sol_keys[i]].AT.mx,\r\n                temp_min: this.parsedData[sol_keys[i]].AT.mn,\r\n                wind_avg: this.parsedData[sol_keys[i]].HWS.av,\r\n                wind_max: this.parsedData[sol_keys[i]].HWS.mx,\r\n                wind_min: this.parsedData[sol_keys[i]].HWS.mn,\r\n                pressure_avg: this.parsedData[sol_keys[i]].PRE.av,\r\n                pressure_max: this.parsedData[sol_keys[i]].PRE.mx,\r\n                pressure_min: this.parsedData[sol_keys[i]].PRE.mn\r\n            });\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Label } from 'recharts';\r\n\r\nexport interface IGraphComponentProps {\r\n    readonly data: any;\r\n    readonly xDataKey: string;\r\n    readonly yDataKeyAvg: string;\r\n    readonly yDataKeyMin: string;\r\n    readonly yDataKeyMax: string;\r\n    readonly yAxisLabel: string;\r\n    readonly colors: string[];\r\n}\r\n\r\nexport default class GraphComponent extends React.Component<IGraphComponentProps, {}> {\r\n\r\n  constructor(props: IGraphComponentProps) {\r\n      super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AreaChart\r\n        width={500}\r\n        height={400}\r\n        data={this.props.data}\r\n        margin={{\r\n          top: 10, right: 30, left: 0, bottom: 0,\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey={this.props.xDataKey}>\r\n          <Label value=\"sol #\" offset={0} position=\"insideBottom\" />\r\n        </XAxis>\r\n        <YAxis> \r\n          <Label value={this.props.yAxisLabel} angle={-90} position=\"insideLeft\" />\r\n        </YAxis>\r\n        <Tooltip />\r\n        <Legend verticalAlign=\"top\" height={36}/>\r\n        <Area type=\"monotone\" dataKey={this.props.yDataKeyMin} stackId=\"1\" stroke={this.props.colors[0]} fill={this.props.colors[0]} />\r\n        <Area type=\"monotone\" dataKey={this.props.yDataKeyAvg} stackId=\"1\" stroke={this.props.colors[1]} fill={this.props.colors[1]} />\r\n        <Area type=\"monotone\" dataKey={this.props.yDataKeyMax} stackId=\"1\" stroke={this.props.colors[2]} fill={this.props.colors[2]} />\r\n      </AreaChart>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Label } from 'recharts';\r\n\r\nexport interface IGraphComponentTempProps {\r\n    readonly data: any;\r\n    readonly xDataKey: string;\r\n    readonly yDataKeyAvg: string;\r\n    readonly yDataKeyMin: string;\r\n    readonly yDataKeyMax: string;\r\n    readonly yAxisLabel: string;\r\n    readonly colors: string[];\r\n}\r\n\r\nexport default class GraphComponentTemp extends React.Component<IGraphComponentTempProps, {}> {\r\n\r\n    constructor(props: IGraphComponentTempProps) {\r\n        super(props);\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <AreaChart\r\n        width={500}\r\n        height={400}\r\n        data={this.props.data}\r\n        margin={{\r\n          top: 10, right: 30, left: 0, bottom: 0,\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey={this.props.xDataKey}>\r\n            <Label value=\"sol #\" offset={0} position=\"insideBottom\" />\r\n        </XAxis>\r\n        <YAxis>\r\n            <Label value={this.props.yAxisLabel} angle={-90} position=\"insideLeft\" />\r\n        </YAxis>\r\n        <Tooltip />\r\n        <Legend verticalAlign=\"top\" height={36}/>\r\n        <Area type=\"monotone\" dataKey={this.props.yDataKeyMax} stackId=\"1\" stroke={this.props.colors[0]} fill={this.props.colors[0]} />\r\n        <Area type=\"monotone\" dataKey={this.props.yDataKeyAvg} stackId=\"1\" stroke={this.props.colors[1]} fill={this.props.colors[1]} />\r\n        <Area type=\"monotone\" dataKey={this.props.yDataKeyMin} stackId=\"1\" stroke={this.props.colors[2]} fill={this.props.colors[2]} />\r\n      </AreaChart>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Stack, IStackTokens } from 'office-ui-fabric-react/lib/Stack';\r\nimport { Footer } from './Footer';\r\nimport { MarsDataHandler } from './MarsDataHandler';\r\nimport GraphComponent from './GraphComponent';\r\nimport GraphComponentTemp from './GraphComponentTemp';\r\nimport { Text, ITextStyles } from 'office-ui-fabric-react/lib/Text';\r\nimport { FontWeights } from 'office-ui-fabric-react/lib/Styling';\r\n\r\nexport interface IPageLayoutStates {\r\n  data: any;\r\n}\r\nexport class PageLayout extends React.Component<{}, IPageLayoutStates> {\r\n\r\n  marsDataHandler = new MarsDataHandler();\r\n  boldStyle: ITextStyles = {\r\n    root: { fontWeight: FontWeights.bold }\r\n  };\r\n  stackTokens: IStackTokens = { childrenGap: 40 };\r\n  temp_colors = [\"#FF9671\", \"#FFC75F\", \"#B39CD0\"];\r\n  wind_colors = [\"#845EC2\", \"#D65DB1\", \"#FF6F91\"];\r\n  pressure_colors = [\"#296073\", \"#3596B5\", \"#ADC5CF\"];\r\n\r\n  constructor(props: Readonly<{}>){\r\n    super(props);\r\n    this.state = ({\r\n      data: [{sol: \"123\", test: 15}]\r\n    })\r\n  }\r\n\r\n  public async componentWillMount() {\r\n    await this.marsDataHandler.getData();\r\n    console.log(this.marsDataHandler.getCompiledData())\r\n    this.setState({\r\n      data: this.marsDataHandler.getCompiledData()\r\n    })\r\n    \r\n  }\r\n  \r\n  public render() {\r\n    console.log(this.state.data);\r\n    return(\r\n      <div className=\"Content\">\r\n        <Stack tokens={this.stackTokens}>\r\n          <Stack.Item align=\"center\">\r\n            <Text variant=\"xxLargePlus\" styles={this.boldStyle}>Mars Weather Dashboard</Text>\r\n          </Stack.Item>\r\n          <Stack>\r\n            <Stack.Item align=\"center\">\r\n              <Text variant=\"xLarge\">Temperature</Text>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <GraphComponentTemp colors={this.temp_colors} yAxisLabel={\"degrees C\"} data={this.state.data} xDataKey={\"sol\"} yDataKeyAvg={\"temp_avg\"} yDataKeyMax={\"temp_max\"} yDataKeyMin={\"temp_min\"} />\r\n            </Stack.Item>\r\n          </Stack>\r\n          <Stack>\r\n            <Stack.Item align=\"center\">\r\n              <Text variant=\"xLarge\">Wind</Text>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <GraphComponent colors={this.wind_colors} yAxisLabel={\"m/s\"} data={this.state.data} xDataKey={\"sol\"} yDataKeyAvg={\"wind_avg\"} yDataKeyMax={\"wind_max\"} yDataKeyMin={\"wind_min\"} />\r\n            </Stack.Item>\r\n          </Stack>\r\n          <Stack>\r\n            <Stack.Item align=\"center\">\r\n              <Text variant=\"xLarge\">Pressure</Text>\r\n            </Stack.Item>\r\n            <Stack.Item align=\"center\">\r\n              <GraphComponent colors={this.pressure_colors} yAxisLabel={\"Pa\"} data={this.state.data} xDataKey={\"sol\"} yDataKeyAvg={\"pressure_avg\"} yDataKeyMax={\"pressure_max\"} yDataKeyMin={\"pressure_min\"} />\r\n            </Stack.Item>\r\n          </Stack>\r\n          <Stack.Item align=\"center\">\r\n            <Footer />\r\n          </Stack.Item>\r\n        </Stack>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { PageLayout } from './PageLayout';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PageLayout />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}